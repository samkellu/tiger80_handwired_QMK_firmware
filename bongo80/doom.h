/* Copyright 2023 Sam Kelly (@samkellu)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "quantum.h"

#define SCREEN_WIDTH          128
#define SCREEN_HEIGHT         64
#define OLED_RESET            -1
#define SCREEN_ADDRESS        0x3C

#define PI                    3.14159
#define WALL_COLLISION_DIST   5
#define ENEMY_COLLISION_DIST  10
#define START_TIME_MILLI      4000
#define FRAME_TIME_MILLI      80

#define UI_HEIGHT             54
#define WALL_OFFSET           27
#define GUN_X                 SCREEN_WIDTH / 2
#define GUN_Y                 UI_HEIGHT

#define ROTATION_SPEED        5
#define DOV                   100.0f
#define FOV                   80.0f

// Represents a place in 2D space
typedef struct vec2 {
  float x, y;
} vec2;

// A line segment or ray
typedef struct segment {
  vec2 u, v;
} segment;

// Control package given as input
typedef struct controls {
  bool l;
  bool r;
  bool f;
  bool shoot;
} controls;

typedef struct enemy {
  vec2 pos;
  int health;
  int width;
} enemy;

typedef struct sprite {
  const char* mask;
  const char* bmp;
  const uint16_t size;
  const uint8_t width;
  const uint8_t height;
} sprite;

// +-----------------------------------------+
// |                                         |
// |                                         |
// |          +-+     +------------+         |
// |          | |     |            |         |
// |          | |     |            |         |
// +----------+ |     +--------+   +---------+
// +------------+              |
// |                           |
// |                           |
// |       +--------+          |
// |       |        |          |
// |       |        |          |
// |       |        |          |
// |       |        |          |
// |       +--------+          |
// |                           |
// |                           |
// +---------------------------+


// Initializes walls
#define NUM_WALLS 20
const segment walls[] PROGMEM = {
  {{0, 0}, {200, 0}},
  {{200, 0}, {200, 70}},
  {{200, 70}, {160, 70}},
  {{160, 70}, {150, 40}},
  {{150, 40}, {120, 40}},
  {{120, 40}, {120, 70}},
  {{120, 70}, {140, 70}},
  {{140, 70}, {140, 200}},
  {{140, 200}, {0, 200}},
  {{0, 200}, {0, 90}},
  {{0, 90}, {80, 90}},
  {{80, 90}, {80, 40}},
  {{80, 40}, {60, 40}},
  {{60, 40}, {60, 70}},
  {{60, 70}, {0, 70}},
  {{0, 70}, {0, 0}},
  {{40, 170}, {40, 130}},
  {{40, 130}, {80, 130}},
  {{80, 130}, {80, 170}},
  {{80, 170}, {40, 170}},
};

#define NUM_ENEMIES 1
const enemy enemies[] PROGMEM = {
  {{100, 20}, 5, 8}
};


// Doom logo intro screen, stored in PROGMEM to save global section space
#define LOGO_WIDTH 128
#define LOGO_HEIGHT 64
static const char doom_logo[] PROGMEM = {
  0x7F, 0xFF, 0xFF, 0xFE, 0x03, 0xFF, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0xC3, 0xFF, 0x80, 0xFF, 0xFE,
  0x3F, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xF3, 0xFF, 0x81, 0xFF, 0xFC,
  0x1F, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xC1, 0xFF, 0xF8,
  0x07, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xC1, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xC3, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xE3, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xE3, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xE7, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xF7, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xF7, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xF7, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x0F, 0xFF, 0x7F, 0xF0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x01, 0xFF, 0xDF, 0xFC, 0x07, 0xFF, 0x7F, 0xE0, 0x3F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x03, 0xFF, 0xDF, 0xFE, 0x07, 0xFF, 0x7F, 0xE0, 0x7F, 0xFB, 0xFF, 0xFF, 0xFF, 0xE0,
  0x07, 0xFF, 0x07, 0xFF, 0xDF, 0xFF, 0x07, 0xFF, 0x7F, 0xE0, 0xFF, 0xFB, 0xFF, 0xFE, 0xFF, 0xE0,
  0x07, 0xFF, 0x1F, 0xFF, 0xDF, 0xFF, 0xC7, 0xFF, 0x7F, 0xE3, 0xFF, 0xFB, 0xFF, 0xBE, 0xFF, 0xE0,
  0x07, 0xFF, 0x3F, 0xFF, 0xDF, 0xFF, 0xE7, 0xFF, 0x7F, 0xE7, 0xFF, 0xFB, 0xFF, 0xBE, 0xFF, 0xE0,
  0x07, 0xFF, 0x7F, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0xBC, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFB, 0xFF, 0x9C, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xF3, 0xFF, 0x9C, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xE7, 0xFF, 0x9C, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0x83, 0xFF, 0x98, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0x00, 0xFF, 0x88, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFE, 0x00, 0x3F, 0xFF, 0xFF, 0x7F, 0xFF, 0xFC, 0x00, 0x7F, 0x88, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xFC, 0x00, 0x1F, 0xFF, 0xFF, 0x7F, 0xFF, 0xF8, 0x00, 0x1F, 0x80, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x0F, 0xFF, 0xFC, 0x3F, 0xFF, 0xF0, 0x00, 0x0F, 0x80, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x03, 0xFF, 0xF8, 0x1F, 0xFF, 0xC0, 0x00, 0x07, 0x80, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0x80, 0x00, 0x01, 0xFF, 0xF0, 0x0F, 0xFF, 0x80, 0x00, 0x01, 0x80, 0xFF, 0xE0,
  0x07, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xE0,
  0x07, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0,
  0x07, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0,
  0x07, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0,
  0x07, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0,
  0x07, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0,
  0x07, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0,
  0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE0,
  0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0,
  0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0,
  0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE0,
  0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint16_t doom_logo_size = sizeof(doom_logo);

// Gun sprite and mask
#define GUN_WIDTH   32
#define GUN_HEIGHT  32
static const char gun_bmp[] PROGMEM = {
  0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x01, 0xc4, 0x00, 0x00, 0x02, 0x04, 0x00,
  0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0xea, 0x00, 0x00, 0x04, 0xd1, 0x00, 0x00, 0x09, 0x88, 0x80,
  0x00, 0x19, 0x00, 0x00, 0x00, 0x0d, 0xc2, 0x80, 0x00, 0x29, 0x81, 0xc0, 0x00, 0x0b, 0xa2, 0x20,
  0x00, 0x31, 0x40, 0x40, 0x00, 0x23, 0x00, 0xc0, 0x00, 0x13, 0x00, 0x40, 0x00, 0x72, 0x02, 0x00,
  0x00, 0x49, 0x00, 0x40, 0x01, 0xe0, 0xa8, 0x20, 0x07, 0xf1, 0x00, 0x30, 0x0b, 0xb9, 0xe0, 0xe8,
  0x07, 0x5c, 0x03, 0xfc, 0x07, 0xef, 0xff, 0xee, 0x07, 0x75, 0x7f, 0xd2, 0x1b, 0xbb, 0xff, 0xb2,
  0x11, 0x57, 0x7d, 0x64, 0x32, 0xaf, 0xff, 0xe8, 0x13, 0x5f, 0x75, 0xd0, 0x33, 0xff, 0xfb, 0x98,
  0x17, 0xd7, 0xe5, 0x00, 0x1b, 0x8f, 0xb2, 0x30, 0x03, 0x7d, 0x58, 0x10, 0x6f, 0xbf, 0xec, 0x20
};

static const char gun_bmp_mask[] PROGMEM = {
  0x00, 0x00, 0x70, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x07, 0xfe, 0x00,
  0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x1f, 0xff, 0xc0,
  0x00, 0x3f, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xf0,
  0x00, 0x7f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xc0,
  0x00, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xfc,
  0x1f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff,
  0x3f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xfc,
  0x7f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xf0
};

const uint16_t gun_size = sizeof(gun_bmp);

// Muzzle flash sprite
#define FLASH_WIDTH 16
#define FLASH_HEIGHT 15
static const char PROGMEM muzzle_flash_bmp [] = {
  0x01, 0x00, 0x03, 0xC0, 0x05, 0xC0, 0x07, 0xE0, 0x0F, 0xE0, 0x3F, 0xE0, 0x3F, 0xD0, 0x3F, 0xFC,
  0x3F, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFC, 0x2F, 0xFC
};

const uint16_t flash_size = sizeof(muzzle_flash_bmp);

// Imp sprite and mask
#define IMP_WIDTH   32
#define IMP_HEIGHT  48
static const char imp_bmp[] PROGMEM = {
  0x00, 0x27, 0x20, 0x00, 0x00, 0x38, 0xE0, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x10, 0x40, 0x00,
  0x00, 0x2D, 0xA0, 0x00, 0x00, 0x25, 0x20, 0x00, 0x00, 0x12, 0x40, 0x00, 0x00, 0x15, 0x40, 0x00,
  0x00, 0x2D, 0xB0, 0x60, 0x30, 0x47, 0x09, 0xC0, 0x1F, 0xC2, 0x0F, 0x80, 0x0E, 0x00, 0x03, 0x00,
  0x0C, 0x00, 0x01, 0xA0, 0x04, 0x00, 0x00, 0xB0, 0x2C, 0x00, 0x00, 0xE0, 0x68, 0x02, 0x00, 0x60,
  0x38, 0x02, 0x00, 0x20, 0x30, 0x0F, 0x80, 0x20, 0x63, 0x82, 0x07, 0x20, 0x44, 0xC2, 0x0D, 0xB0,
  0x44, 0x47, 0x08, 0x90, 0x48, 0x42, 0x10, 0xD0, 0x48, 0x4F, 0x90, 0x48, 0x50, 0x42, 0x10, 0x48,
  0xD0, 0x42, 0x08, 0x48, 0xA0, 0x40, 0x08, 0x50, 0xA0, 0x40, 0x08, 0x50, 0xA0, 0xC0, 0x04, 0xD0,
  0xB0, 0x80, 0x05, 0x20, 0x90, 0x80, 0x85, 0x20, 0x50, 0x87, 0x84, 0xC0, 0x60, 0x84, 0x84, 0x00,
  0x00, 0x84, 0x84, 0x00, 0x00, 0x8C, 0x84, 0x00, 0x00, 0x88, 0x84, 0x00, 0x00, 0x88, 0x84, 0x00,
  0x00, 0x4C, 0xC8, 0x00, 0x00, 0x44, 0x48, 0x00, 0x00, 0x24, 0x48, 0x00, 0x00, 0x24, 0x48, 0x00,
  0x00, 0x32, 0x48, 0x00, 0x00, 0x32, 0x50, 0x00, 0x00, 0x12, 0x50, 0x00, 0x00, 0x1C, 0x50, 0x00,
  0x00, 0x0C, 0x58, 0x00, 0x00, 0x1C, 0x68, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00
};

static const char imp_bmp_mask[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00,
  0x00, 0x12, 0x40, 0x00, 0x00, 0x1A, 0xC0, 0x00, 0x00, 0x0D, 0x80, 0x00, 0x00, 0x0A, 0x80, 0x00,
  0x00, 0x12, 0x40, 0x00, 0x00, 0x38, 0xF0, 0x00, 0x00, 0x3D, 0xF0, 0x00, 0x01, 0xFF, 0xFC, 0x00,
  0x03, 0xFF, 0xFE, 0x00, 0x03, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0x00, 0x07, 0xFD, 0xFF, 0x80,
  0x07, 0xFD, 0xFF, 0xC0, 0x0F, 0xF0, 0x7F, 0xC0, 0x1C, 0x7D, 0xF8, 0xC0, 0x38, 0x3D, 0xF0, 0x40,
  0x38, 0x38, 0xF0, 0x60, 0x30, 0x3D, 0xE0, 0x20, 0x30, 0x30, 0x60, 0x30, 0x20, 0x3D, 0xE0, 0x30,
  0x20, 0x3D, 0xF0, 0x30, 0x40, 0x3F, 0xF0, 0x20, 0x40, 0x3F, 0xF0, 0x20, 0x40, 0x3F, 0xF8, 0x20,
  0x40, 0x7F, 0xF8, 0xC0, 0x60, 0x7F, 0x78, 0xC0, 0x20, 0x78, 0x78, 0x00, 0x00, 0x78, 0x78, 0x00,
  0x00, 0x78, 0x78, 0x00, 0x00, 0x70, 0x78, 0x00, 0x00, 0x70, 0x78, 0x00, 0x00, 0x70, 0x78, 0x00,
  0x00, 0x30, 0x30, 0x00, 0x00, 0x38, 0x30, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x18, 0x30, 0x00,
  0x00, 0x0C, 0x30, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00,
  0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00 
};

const uint16_t imp_bmp_size = sizeof(imp_bmp);

float pow2(float x);

float dot(vec2 v, vec2 u);

float dist2(vec2 v, vec2 u);

vec2 sub(vec2 v, vec2 u);

vec2 add(vec2 v, vec2 u);

vec2 proj(vec2 v, vec2 u);

float inv_sqrt(float num);

void doom_setup(void);

void draw_gun(bool moving, bool show_flash);

void doom_update(controls c);

void render_map(vec2 p, int pa);

vec2 raycast(segment s1, segment s2, bool* hit);

void vertical_line(int x, int half_length);

void check_line(int x, int half_length, bool phase);

bool collision_detection(vec2 p);

float point_ray_dist2(vec2 p, segment s);

void oled_write_bmp_P(const char* data, const uint16_t size, int width, int height, int x, int y, bool invert);

bool render_enemy(int screen_x, segment ray, enemy e, bool hit_wall, float wall_dist);

void oled_write_texture_slice(const char* data, const char* mask, const uint16_t size, int text_width, int text_height, int slice_col, int slice_height, int x, int y_start);